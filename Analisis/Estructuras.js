/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Estructuras = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,7],$V2=[1,20],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,16],$V7=[7,9,12,20,21,22,25],$V8=[9,19],$V9=[8,19,23],$Va=[1,38],$Vb=[1,33],$Vc=[1,36],$Vd=[1,39],$Ve=[1,40],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,48],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[19,33,34,35,36,37,60],$Vq=[19,33,34,35,36,37,40,41,42,43,44,45,60],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[19,33,34,35,36,37,40,41,42,43,44,45,47,48,49,50,51,52,60],$Vw=[2,24],$Vx=[1,71],$Vy=[19,33,34,35,36,37,40,41,42,43,44,45,47,48,60],$Vz=[19,33,37,60],$VA=[19,33,34,36,37,60],$VB=[19,33,34,35,36,37,40,41,42,43,44,45,47,48,49,50,51,60],$VC=[27,28];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LELEM":4,"EOF":5,"ELEM":6,"element":7,":":8,"id":9,"{":10,"CELEM":11,"}":12,"SENT":13,"DECVAR":14,"DECARR":15,"TVAR":16,"LIDC":17,"VALVAR":18,";":19,"tbool":20,"tnum":21,"tstr":22,",":23,"EXP":24,"array":25,"LCV":26,"of":27,"[":28,"INDICE":29,"]":30,"num":31,"..":32,"||":33,"&&":34,"|&":35,"&?":36,"|?":37,"!":38,"EXP1":39,"==":40,"!=":41,">":42,"<":43,">=":44,"<=":45,"EXP2":46,"+":47,"-":48,"*":49,"/":50,"%":51,"^":52,"EXP3":53,"true":54,"false":55,"LIDP":56,"LLAMADO":57,"cad":58,"(":59,")":60,"null":61,"LC":62,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"element",8:":",9:"id",10:"{",12:"}",19:";",20:"tbool",21:"tnum",22:"tstr",23:",",25:"array",27:"of",28:"[",30:"]",31:"num",32:"..",33:"||",34:"&&",35:"|&",36:"&?",37:"|?",38:"!",40:"==",41:"!=",42:">",43:"<",44:">=",45:"<=",47:"+",48:"-",49:"*",50:"/",51:"%",52:"^",54:"true",55:"false",56:"LIDP",57:"LLAMADO",58:"cad",59:"(",60:")",61:"null"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[11,2],[11,1],[13,1],[13,1],[13,1],[14,4],[16,1],[16,1],[16,1],[16,1],[17,3],[17,1],[18,2],[18,0],[15,7],[26,4],[26,3],[29,3],[29,1],[29,0],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,1],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,2],[46,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,3],[53,1],[62,1],[62,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	   	return $$[$0-1];
	   
break;
case 2:
$$[$0-1].hijos.push($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$={nombre:'elementos',hijos:[$$[$0]]};
break;
case 4:

         this.$={nombre:'element',valor:$$[$0-3],hijos:[$$[$0-1]]};
       
break;
case 5:
$$[$0-1].hijos.push($$[$0]); this.$=$$[$0-1];
break;
case 6:
this.$={nombre:'cuerpo',hijos:[$$[$0]]};
break;
case 7: case 8: case 9: case 17: case 31: case 38: case 46: case 50: case 51: case 55:
this.$=$$[$0];
break;
case 10:
this.$={nombre:'dec',tipo:$$[$0-3],hijos:[$$[$0-2],$$[$0-1]]};
break;
case 11:
this.$={tipo:'bool'};
break;
case 12:
this.$={tipo:'num'};
break;
case 13:
this.$={tipo:'str'};
break;
case 14:
this.$={tipo:'id',hijos:$$[$0]};
break;
case 15:
$$[$0-2].hijos.push($$[$0]);this.$=$$[$0-2];
break;
case 16:
this.$={nombre:'lid',hijos:[$$[$0]]};
break;
case 18: case 56:
this.$=null;
break;
case 19:
this.$={nombre:'array',tipo:$$[$0-1],valor:$$[$0-4],hijos:[$$[$0-3]]};
break;
case 20:
$$[$0-3].hijos.push($$[$0-1]);this.$=$$[$0-3];
break;
case 21:
this.$={nombre:'lcv',hijos:[$$[$0-1]]};
break;
case 22:
this.$={nombre:'indice',inf:$$[$0-2],sup:$$[$0]};
break;
case 23:
this.$={nombre:'indice',inf:0,sup:$$[$0]};
break;
case 24:
this.$={nombre:'indice',inf:-1,sup:-1};
break;
case 25:
this.$={nombre:'||',hijos: [$$[$0-2] , $$[$0]]};
break;
case 26:
this.$={nombre:'&&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 27:
this.$={nombre:'|&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 28:
this.$={nombre:'&?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 29:
this.$={nombre:'|?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 30:
this.$={nombre:'!',hijos: [$$[$0]]};
break;
case 32:
this.$={nombre:'==',hijos: [$$[$0-2] , $$[$0]]};
break;
case 33:
this.$={nombre:'!=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 34:
this.$={nombre:'>',hijos: [$$[$0-2] , $$[$0]]};
break;
case 35:
this.$={nombre:'<',hijos: [$$[$0-2] , $$[$0]]};
break;
case 36:
this.$={nombre:'>=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 37:
this.$={nombre:'<=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 39:
this.$={nombre:'+',hijos: [$$[$0-2] , $$[$0]]};
break;
case 40:
this.$={nombre:'-',hijos: [$$[$0-2] , $$[$0]]};
break;
case 41:
this.$={nombre:'*',hijos: [$$[$0-2] , $$[$0]]};
break;
case 42:
this.$={nombre:'/',hijos: [$$[$0-2] , $$[$0]]};
break;
case 43:
this.$={nombre:'%',hijos: [$$[$0-2] , $$[$0]]};
break;
case 44:
this.$={nombre:'^',hijos: [$$[$0-2] , $$[$0]]};
break;
case 45:
this.$={nombre:'-',hijos: [$$[$0]]};
break;
case 47:
this.$={nombre:'valor',tipo:'num', valor : $$[$0]};
break;
case 48:
this.$={nombre:'valor',tipo:'bool', valor : 'true'};
break;
case 49:
this.$={nombre:'valor',tipo:'bool', valor : 'false'};
break;
case 52:
this.$={nombre:'valor',tipo:'str', valor : $$[$0]};
break;
case 53:
this.$=$$[$0-1];
break;
case 54:
this.$={nombre:'null'};
break;
}
},
table: [{3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,5],6:6,7:$V0},o($V1,[2,3]),{8:[1,7]},{1:[2,1]},o($V1,[2,2]),{9:[1,8]},{10:[1,9]},{6:14,7:$V0,9:$V2,11:10,13:11,14:12,15:13,16:15,20:$V3,21:$V4,22:$V5,25:$V6},{6:14,7:$V0,9:$V2,12:[1,21],13:22,14:12,15:13,16:15,20:$V3,21:$V4,22:$V5,25:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),{9:[1,24],17:23},{8:[1,25]},o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),o($V8,[2,14]),o([5,7,9,12,20,21,22,25],[2,4]),o($V7,[2,5]),{8:[1,28],18:26,19:[2,18],23:[1,27]},o($V9,[2,16]),{9:[1,29]},{19:[1,30]},{9:[1,31]},{24:32,31:$Va,38:$Vb,39:34,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{26:46,28:[1,47]},o($V7,[2,10]),o($V9,[2,15]),{19:[2,17],33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo},{24:53,31:$Va,38:$Vb,39:34,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},o($Vp,[2,31],{40:[1,54],41:[1,55],42:[1,56],43:[1,57],44:[1,58],45:[1,59]}),o($Vq,[2,38],{47:[1,60],48:[1,61],49:$Vr,50:$Vs,51:$Vt,52:$Vu}),{31:$Va,46:66,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},o($Vv,[2,46]),o($Vv,[2,47]),o($Vv,[2,48]),o($Vv,[2,49]),o($Vv,[2,50]),o($Vv,[2,51]),o($Vv,[2,52]),{24:67,31:$Va,38:$Vb,39:34,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},o($Vv,[2,54]),{27:[1,68],28:[1,69]},{29:70,30:$Vw,31:$Vx},{24:72,31:$Va,38:$Vb,39:34,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{24:73,31:$Va,38:$Vb,39:34,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{24:74,31:$Va,38:$Vb,39:34,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{24:75,31:$Va,38:$Vb,39:34,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{24:76,31:$Va,38:$Vb,39:34,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},o($Vp,[2,30]),{31:$Va,39:77,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,39:78,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,39:79,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,39:80,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,39:81,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,39:82,46:35,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,46:83,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,46:84,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,46:85,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,46:86,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,46:87,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},{31:$Va,46:88,48:$Vc,53:37,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj},o($Vy,[2,45],{49:$Vr,50:$Vs,51:$Vt,52:$Vu}),{33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,60:[1,89]},{9:$V2,16:90,20:$V3,21:$V4,22:$V5},{29:91,30:$Vw,31:$Vx},{30:[1,92]},{30:[2,23],32:[1,93]},o($Vz,[2,25],{34:$Vl,35:$Vm,36:$Vn}),o($VA,[2,26],{35:$Vm}),o($Vp,[2,27]),o($VA,[2,28],{35:$Vm}),o($Vz,[2,29],{34:$Vl,35:$Vm,36:$Vn}),o($Vq,[2,32]),o($Vq,[2,33]),o($Vq,[2,34]),o($Vq,[2,35]),o($Vq,[2,36]),o($Vq,[2,37]),o($Vy,[2,39],{49:$Vr,50:$Vs,51:$Vt,52:$Vu}),o($Vy,[2,40],{49:$Vr,50:$Vs,51:$Vt,52:$Vu}),o($VB,[2,41],{52:$Vu}),o($VB,[2,42],{52:$Vu}),o($VB,[2,43],{52:$Vu}),o($VB,[2,44],{52:$Vu}),o($Vv,[2,53]),{19:[1,94]},{30:[1,95]},o($VC,[2,21]),{31:[1,96]},o($V7,[2,19]),o($VC,[2,20]),{30:[2,22]}],
defaultActions: {5:[2,1],96:[2,22]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* espacios en blanco se ignoran */
break;
case 1:/* espacios en blanco se ignoran */
break;
case 2:/* espacios en blanco se ignoran */
break;
case 3:/*comentario de linea*/
break;
case 4:/*comentario de parrafo*/
break;
case 5:return 31
break;
case 6:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58;
break;
case 7:return 49
break;
case 8:return 50
break;
case 9:return 48
break;
case 10:return 47
break;
case 11:return 52
break;
case 12:return 51
break;
case 13:return 59
break;
case 14:return 60
break;
case 15:return 10
break;
case 16:return 12
break;
case 17:return 28
break;
case 18:return 30
break;
case 19:return 8
break;
case 20:return 19
break;
case 21:return 23
break;
case 22:return 32
break;
case 23:return '.'
break;
case 24:return 40
break;
case 25:return '='
break;
case 26:return 41
break;
case 27:return 44
break;
case 28:return 45
break;
case 29:return 42
break;
case 30:return 43
break;
case 31:return 33
break;
case 32:return 37
break;
case 33:return 34
break;
case 34:return 36
break;
case 35:return 33
break;
case 36:return 35
break;
case 37:return 38
break;
case 38:return 20
break;
case 39:return 22
break;
case 40:return 21
break;
case 41:return 'tvoid'
break;
case 42:return 21
break;
case 43:return 25
break;
case 44:return 7
break;
case 45:return 27
break;
case 46:return 'if'
break;
case 47:return 'then'
break;
case 48:return 'else'
break;
case 49:return 'switch'
break;
case 50:return 'case'
break;
case 51:return 'default'
break;
case 52:return 'break'
break;
case 53:return 'continue'
break;
case 54:return 'return'
break;
case 55:return 'while'
break;
case 56:return 'do'
break;
case 57:return 'repeat'
break;
case 58:return 'until'
break;
case 59:return 'for'
break;
case 60:return 'loop'
break;
case 61:return 'count'
break;
case 62:return 'whilex'
break;
case 63:return 'principal'
break;
case 64:return 'getBool'
break;
case 65:return 'getNum'
break;
case 66:return 'outStr'
break;
case 67:return 'outNum'
break;
case 68:return 'inStr'
break;
case 69:return 'inNum'
break;
case 70:return 'show'
break;
case 71:return 'getRandom'
break;
case 72:return 'getLength'
break;
case 73:return 'throws'
break;
case 74:return 61
break;
case 75:return 'NullPoinerException'
break;
case 76:return 'MissingReturnStatement'
break;
case 77:return 'ArithmeticException'
break;
case 78:return 'StackOverFlowException'
break;
case 79:return 'HeapOverFlowException'
break;
case 80:return 'PoolOverFlowException'
break;
case 81:return 54
break;
case 82:return 55
break;
case 83:return 9
break;
case 84:return 5
break;
case 85:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\r)/,/^(?:\n)/,/^(?:%%[^\n]*\n)/,/^(?:¿¿[^"??"]*\?\?)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&&)/,/^(?:&\?)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:bool\b)/,/^(?:str\b)/,/^(?:num\b)/,/^(?:void\b)/,/^(?:num\b)/,/^(?:array\b)/,/^(?:element\b)/,/^(?:of\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:Principal\b)/,/^(?:getBool\b)/,/^(?:getNum\b)/,/^(?:outStr\b)/,/^(?:outNum\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:throws\b)/,/^(?:NULL\b)/,/^(?:NullPoinerException\b)/,/^(?:MissingReturnStatement\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Estructuras;
exports.Parser = Estructuras.Parser;
exports.parse = function () { return Estructuras.parse.apply(Estructuras, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Avanzado = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,17],$V4=[1,10],$V5=[1,16],$V6=[1,11],$V7=[5,15,16,17,20,23,64,106],$V8=[21,26],$V9=[1,21],$Va=[2,56],$Vb=[1,24],$Vc=[14,20,21,26],$Vd=[2,12],$Ve=[1,27],$Vf=[14,19,20,21,26,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,55,56,57,66],$Vg=[14,19,21],$Vh=[1,32],$Vi=[2,22],$Vj=[1,34],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,48],$Vo=[1,49],$Vp=[5,15,16,17,20,23,63,64,71,81,85,90,92,93,94,95,97,100,101,102,103,106],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[14,19,21,31,32,33,34,35,36,56],$Vx=[14,19,21,31,32,33,34,35,36,38,39,40,41,42,43,56],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[14,19,21,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,56],$VD=[19,21,25,26,56],$VE=[1,87],$VF=[1,99],$VG=[1,100],$VH=[1,103],$VI=[1,104],$VJ=[1,108],$VK=[1,105],$VL=[1,101],$VM=[1,102],$VN=[1,106],$VO=[1,107],$VP=[19,56],$VQ=[15,16,17,20,23,63,71,81,85,90,92,93,94,95,97,100,101,102,103],$VR=[1,137],$VS=[14,19,21,31,35,56],$VT=[14,19,21,31,32,34,35,56],$VU=[14,19,21,31,32,33,34,35,36,38,39,40,41,42,43,45,46,56],$VV=[14,19,21,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,56],$VW=[1,220],$VX=[63,90,92];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"BASIC":4,"EOF":5,"BSENT":6,"DECVAR":7,"DECFUN":8,"DECARR":9,"PRINCIPAL":10,"TVAR":11,"LIDC":12,"VALVAR":13,";":14,"tbool":15,"tnum":16,"tstr":17,"LIDP":18,",":19,"id":20,":":21,"EXP":22,"array":23,"LCV":24,"of":25,"[":26,"INDICE":27,"]":28,"num":29,"..":30,"||":31,"&&":32,"|&":33,"&?":34,"|?":35,"!":36,"EXP1":37,"==":38,"!=":39,">":40,"<":41,">=":42,"<=":43,"EXP2":44,"+":45,"-":46,"*":47,"/":48,"%":49,"^":50,"EXP3":51,"true":52,"false":53,"cad":54,"(":55,")":56,".":57,"TFUN":58,"LC":59,"LPAR":60,"{":61,"CUERPO":62,"}":63,"tvoid":64,"ASIGNACION":65,"=":66,"SENT":67,"IF":68,"SWITCH":69,"BREAK":70,"continue":71,"RETURN":72,"WHILE":73,"DOWHILE":74,"FOR":75,"LOOP":76,"COUNT":77,"DOWHILEX":78,"REPEAT":79,"LLAMADO":80,"if":81,"then":82,"ELSE":83,"else":84,"switch":85,"MODO":86,"CASOS":87,"DEFECTO":88,"CASO":89,"case":90,"VALCASE":91,"default":92,"while":93,"do":94,"repeat":95,"until":96,"for":97,"VARFOR":98,"OPFOR":99,"break":100,"return":101,"loop":102,"count":103,"whilex":104,"LPARFUN":105,"principal":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:";",15:"tbool",16:"tnum",17:"tstr",19:",",20:"id",21:":",23:"array",25:"of",26:"[",28:"]",29:"num",30:"..",31:"||",32:"&&",33:"|&",34:"&?",35:"|?",36:"!",38:"==",39:"!=",40:">",41:"<",42:">=",43:"<=",45:"+",46:"-",47:"*",48:"/",49:"%",50:"^",52:"true",53:"false",54:"cad",55:"(",56:")",57:".",61:"{",63:"}",64:"tvoid",66:"=",71:"continue",81:"if",82:"then",84:"else",85:"switch",90:"case",92:"default",93:"while",94:"do",95:"repeat",96:"until",97:"for",100:"break",101:"return",102:"loop",103:"count",104:"whilex",106:"principal"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[7,4],[11,1],[11,1],[11,1],[11,1],[12,3],[12,1],[13,2],[13,0],[9,7],[24,4],[24,3],[27,3],[27,1],[27,0],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,3],[18,3],[18,1],[8,10],[58,1],[58,1],[59,1],[59,0],[60,5],[60,3],[60,0],[65,3],[62,2],[62,1],[67,1],[67,1],[67,2],[67,1],[67,1],[67,2],[67,2],[67,2],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[68,9],[83,4],[83,0],[69,10],[86,1],[86,1],[87,2],[87,1],[89,4],[91,1],[88,3],[88,0],[73,7],[74,8],[79,8],[75,10],[98,1],[98,4],[99,4],[99,4],[70,2],[70,1],[72,2],[72,1],[76,5],[77,7],[78,10],[80,5],[105,3],[105,1],[105,0],[10,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	   	return $$[$0-1];
	   
break;
case 2: case 61: case 85:
$$[$0-1].hijos.push($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$={nombre:'basic',hijos:[$$[$0]]};
break;
case 4: case 5: case 6: case 7: case 12: case 15: case 29: case 36: case 43: case 47: case 53: case 55: case 63: case 64: case 66: case 67: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 88: case 95:
this.$=$$[$0];
break;
case 8:
this.$={nombre:'dec',tipo:$$[$0-3],hijos:[$$[$0-2],$$[$0-1]]};
break;
case 9:
this.$='tbool';
break;
case 10:
this.$='tnum';
break;
case 11:
this.$='tstr'
break;
case 13: case 50:
$$[$0-2].hijos.push($$[$0]);this.$=$$[$0-2];
break;
case 14:
this.$={nombre:'lid',hijos:[$$[$0]]};
break;
case 16: case 56: case 81: case 90:
this.$=null;
break;
case 17:
this.$={nombre:'array',tipo:$$[$0-1],valor:$$[$0-4],hijos:[$$[$0-3]]};
break;
case 18:
$$[$0-3].hijos.push($$[$0-1]);this.$=$$[$0-3];
break;
case 19:
this.$={nombre:'lcv',hijos:[$$[$0-1]]};
break;
case 20:
this.$={nombre:'indice',inf:$$[$0-2],sup:$$[$0]};
break;
case 21:
this.$={nombre:'indice',inf:0,sup:$$[$0]};
break;
case 22:
this.$={nombre:'indice',inf:-1,sup:-1};
break;
case 23:
this.$={nombre:'||',hijos: [$$[$0-2] , $$[$0]]};
break;
case 24:
this.$={nombre:'&&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 25:
this.$={nombre:'|&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 26:
this.$={nombre:'&?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 27:
this.$={nombre:'|?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 28:
this.$={nombre:'!',hijos: [$$[$0-2] , $$[$0]]};
break;
case 30:
this.$={nombre:'==',hijos: [$$[$0-2] , $$[$0]]};
break;
case 31:
this.$={nombre:'!=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 32:
this.$={nombre:'>',hijos: [$$[$0-2] , $$[$0]]};
break;
case 33:
this.$={nombre:'<',hijos: [$$[$0-2] , $$[$0]]};
break;
case 34:
this.$={nombre:'>=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 35:
this.$={nombre:'<=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 37:
this.$={nombre:'+',hijos: [$$[$0-2] , $$[$0]]};
break;
case 38:
this.$={nombre:'-',hijos: [$$[$0-2] , $$[$0]]};
break;
case 39:
this.$={nombre:'*',hijos: [$$[$0-2] , $$[$0]]};
break;
case 40:
this.$={nombre:'/',hijos: [$$[$0-2] , $$[$0]]};
break;
case 41:
this.$={nombre:'%',hijos: [$$[$0-2] , $$[$0]]};
break;
case 42:
this.$={nombre:'^',hijos: [$$[$0-2] , $$[$0]]};
break;
case 44:
this.$={nombre:'valor',tipo:'num', valor : $$[$0]};
break;
case 45:
this.$={nombre:'valor',tipo:'bool', valor : 'true'};
break;
case 46:
this.$={nombre:'valor',tipo:'bool', valor : 'false'};
break;
case 48:
this.$={nombre:'valor',tipo:'cad', valor : $$[$0]};
break;
case 49: case 65: case 68: case 70: case 80:
this.$=$$[$0-1];
break;
case 51:
this.$={nombre:'lidp',hijos:[$$[$0]]};
break;
case 52:

		this.$={nombre:'decfun',tipo:$$[$0-9],valor:$$[$0-6],hijos:[]};
		if($$[$0-8] !== null){
		this.$.hijos.push($$[$0-8]);
		}else{
		this.$.hijos.push($$[$0-4]);
		this.$.hijos.push($$[$0-1]);
		}
		
break;
case 54:
this.$='tvoid'
break;
case 57:
var v={nombre:$$[$0-3],tipo:$$[$0-4],hijos:[$$[$0-1]]};$$[$0-4].hijos.push(v);this.$=$$[$0-4];
break;
case 58:
var v={nombre:$$[$0-1],tipo:$$[$0-2],hijos:[$$[$0]]};this.$={nombre:'lpar',hijos:[v]};
break;
case 59:
this.$={nombre:'lpar',hijos:[]};
break;
case 60:
this.$ = {nombre:'asig',hijos:[$$[$0-2],$$[$0]]};
break;
case 62:
this.$={nombre:'cuerpo',hijos:[$$[$0]]};
break;
case 69:
this.$={nombre:'continue'};
break;
case 79:

	 this.$={nombre:'if',hijos:[$$[$0-6],$$[$0-2]]};
	 if($$[$0]!==null){
	 this.$.hijos.push($$[$0]);
	 }
	 
break;
case 82:

	   this.$={nombre:'switch',hijos:[$$[$0-7],$$[$0-5],$$[$0-2],$$[$0-1]]};
	   
break;
case 83:
this.$='true';
break;
case 84:
this.$='false';
break;
case 86:
this.$={nombre:'casos',hijos:[$$[$0]]};
break;
case 87:
this.$={nombre:'case',hijos:[$$[$0-2],$$[$0]]};
break;
case 89:
this.$={nombre:'default',hijos:[$$[$0]]};
break;
case 91:
this.$={nombre:'while',hijos:[$$[$0-4],$$[$0-1]]};
break;
case 92:
this.$={nombre:'dowhile',hijos:[$$[$0-5],$$[$0-1]]};
break;
case 93:
this.$={nombre:'repeat',hijos:[$$[$0-5],$$[$0-1]]};
break;
case 94:
this.$={nombre:'for',hijos:[$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]]};
break;
case 96:

	   var v= {nombre:'lid',hijos:[$$[$0-2]]};
	   this.$={nombre:'dec',tipo:'tnum',hijos:[v,$$[$0]]};
	   
break;
case 97:
	  
	  var lidp ={nombre:'lidp',hijos:[$$[$0-3]]};
	  var b={nombre:'valor',tipo:'num', valor : '1'};
	  var suma={nombre:'+',hijos:[lidp,b]};
	  this.$ = {nombre:'asig',hijos:[lidp,suma]};
	  
break;
case 98:
	  
	  var lidp ={nombre:'lidp',hijos:[$$[$0-3]]}	;
	  var b={nombre:'valor',tipo:'num', valor : '1'};
	  var resta={nombre:'-',hijos:[lidp,b]};
	  this.$ = {nombre:'asig',hijos:[lidp,resta]};
	  
break;
case 99:
this.$={nombre:'break',hijos:[$$[$0]]};
break;
case 100:
this.$={nombre:'break',hijos:[]};
break;
case 101:
this.$={nombre:'return',hijos:[$$[$0]]};
break;
case 102:
this.$={nombre:'return',hijos:[]};
break;
case 103:
this.$={nombre:'loop',valor:$$[$0-3],hijos:[$$[$0-1]]};
break;
case 104:
this.$={nombre:'count',hijos:[$$[$0-4],$$[$0-1]]};
break;
case 105:
this.$={nombre:'dowhilex',hijos:[$$[$0-7],$$[$0-3],$$[$0-1]]};
break;
case 106:

	    this.$={nombre:'llamado',hijos:[$$[$0-4],$$[$0-2]]};
	    
break;
case 107:
$$[$0-2].hijos.push($$[$0-1]);this.$=$$[$0-2];
break;
case 108:
this.$={nombre:'lparfun',hijos:[$$[$0]]};
break;
case 109:
this.$={nombre:'lparfun',hijos:[]};
break;
case 110:
this.$={nombre:'principal',hijos:[$$[$0-1]]};
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,15:$V0,16:$V1,17:$V2,18:15,20:$V3,23:$V4,58:9,64:$V5,106:$V6},{1:[3]},{5:[1,18],6:19,7:4,8:5,9:6,10:7,11:8,15:$V0,16:$V1,17:$V2,18:15,20:$V3,23:$V4,58:9,64:$V5,106:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),o($V8,[2,53],{12:20,20:$V9}),{21:$Va,24:23,26:$Vb,59:22},{21:[1,25]},{55:[1,26]},o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,$Vd,{57:$Ve}),o($V8,[2,54]),o($Vf,[2,51]),{1:[2,1]},o($V7,[2,2]),{13:28,14:[2,16],19:[1,29],21:[1,30]},o($Vg,[2,14]),{21:[1,31]},o([19,21,56],[2,55],{26:$Vh}),{27:33,28:$Vi,29:$Vj},{20:[1,35]},{56:[1,36]},{20:[1,37]},{14:[1,38]},{20:[1,39]},{18:47,20:$V3,22:40,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{20:[1,50]},{27:51,28:$Vi,29:$Vj},{28:[1,52]},{28:[2,21],30:[1,53]},{24:54,26:$Vb},{61:[1,55]},o($Vf,[2,50]),o($Vp,[2,8]),o($Vg,[2,13]),{14:[2,15],31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv},o($Vw,[2,29],{38:[1,62],39:[1,63],40:[1,64],41:[1,65],42:[1,66],43:[1,67]}),o($Vx,[2,36],{45:[1,68],46:[1,69],47:$Vy,48:$Vz,49:$VA,50:$VB}),o($VC,[2,43]),o($VC,[2,44]),o($VC,[2,45]),o($VC,[2,46]),o($VC,[2,47],{57:$Ve}),o($VC,[2,48]),{18:47,20:$V3,22:74,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{55:[1,75]},{28:[1,76]},o($VD,[2,19]),{29:[1,77]},{25:[1,78],26:$Vh},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:79,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{18:47,20:$V3,22:109,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,22:110,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,22:111,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,22:112,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,22:113,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,22:114,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,37:115,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,37:116,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,37:117,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,37:118,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,37:119,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,37:120,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,44:121,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,44:122,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,44:123,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,44:124,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,44:125,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,29:$Vk,44:126,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,56:[1,127]},o($VP,[2,59],{18:15,60:128,11:129,15:$V0,16:$V1,17:$V2,20:$V3}),o($VD,[2,18]),{28:[2,20]},{11:130,15:$V0,16:$V1,17:$V2,18:15,20:$V3},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,131],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},o($VQ,[2,62]),o($VQ,[2,63]),o($VQ,[2,64]),{14:[1,133]},o($VQ,[2,66]),o($VQ,[2,67]),{14:[1,134]},{14:[1,135]},{14:[1,136]},o($VQ,[2,71]),o($VQ,[2,72]),o($VQ,[2,73]),o($VQ,[2,74]),o($VQ,[2,75]),o($VQ,[2,76]),o($VQ,[2,77]),o($VQ,[2,78]),{12:20,20:$V9},{20:$Vd,55:[1,138],57:$Ve,66:$VR},{55:[1,139]},{55:[1,140]},{14:[2,100],20:[1,141]},{14:[2,102],18:47,20:$V3,22:142,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{55:[1,143]},{61:[1,144]},{55:[1,145]},{20:[1,146]},{55:[1,147]},{61:[1,148]},o($VS,[2,23],{32:$Vr,33:$Vs,34:$Vt,36:$Vv}),o($VT,[2,24],{33:$Vs,36:$Vv}),o([14,19,21,31,32,33,34,35,56],[2,25],{36:$Vv}),o($VT,[2,26],{33:$Vs,36:$Vv}),o($VS,[2,27],{32:$Vr,33:$Vs,34:$Vt,36:$Vv}),o($Vw,[2,28]),o($Vx,[2,30]),o($Vx,[2,31]),o($Vx,[2,32]),o($Vx,[2,33]),o($Vx,[2,34]),o($Vx,[2,35]),o($VU,[2,37],{47:$Vy,48:$Vz,49:$VA,50:$VB}),o($VU,[2,38],{47:$Vy,48:$Vz,49:$VA,50:$VB}),o($VV,[2,39],{50:$VB}),o($VV,[2,40],{50:$VB}),o($VV,[2,41],{50:$VB}),o($VV,[2,42],{50:$VB}),o($VC,[2,49]),{19:[1,150],56:[1,149]},{20:[1,151]},{14:[1,152]},o($V7,[2,110]),o($VQ,[2,61]),o($VQ,[2,65]),o($VQ,[2,68]),o($VQ,[2,69]),o($VQ,[2,70]),{18:47,20:$V3,22:153,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},o($VP,[2,109],{37:41,44:42,51:43,18:47,105:154,22:155,20:$V3,29:$Vk,52:$Vl,53:$Vm,54:$Vn,55:$Vo}),{18:47,20:$V3,22:156,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,22:157,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{14:[2,99]},{14:[2,101],31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv},{18:47,20:$V3,22:158,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:159,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{16:[1,162],18:163,20:$V3,65:161,98:160},{61:[1,164]},{18:47,20:$V3,22:165,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:166,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{61:[1,167]},{11:168,15:$V0,16:$V1,17:$V2,18:15,20:$V3},o($VP,$Va,{24:23,59:169,26:$Vb}),o($Vp,[2,17]),{14:[2,60],31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv},{19:[1,171],56:[1,170]},o($VP,[2,108],{31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv}),{31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,56:[1,172]},{19:[1,173],31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv},{31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,56:[1,174]},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,175],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{14:[1,176]},{14:[2,95]},{20:[1,177]},{57:$Ve,66:$VR},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:178,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,56:[1,179]},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,180],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:181,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{20:[1,182]},o($VP,[2,58]),{14:[1,183]},{18:47,20:$V3,22:184,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{82:[1,185]},{52:[1,187],53:[1,188],86:186},{61:[1,189]},{93:[1,190],104:[1,191]},{18:47,20:$V3,22:192,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{66:[1,193]},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,194],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{61:[1,195]},{96:[1,196]},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,197],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},o($VP,$Va,{24:23,59:198,26:$Vb}),o($VQ,[2,106]),o($VP,[2,107],{31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv}),{61:[1,199]},{56:[1,200]},{56:[2,83]},{56:[2,84]},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:201,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{55:[1,202]},{55:[1,203]},{14:[1,204],31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv},{18:47,20:$V3,22:205,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},o($VQ,[2,103]),{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:206,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{55:[1,207]},o($V7,[2,52]),o($VP,[2,57]),{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:208,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{61:[1,209]},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,210],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{18:47,20:$V3,22:211,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{18:47,20:$V3,22:212,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{20:[1,214],99:213},{14:[2,96],31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,215],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{18:47,20:$V3,22:216,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,217],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{87:218,89:219,90:$VW},o($VQ,[2,91]),{31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,56:[1,221]},{19:[1,222],31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv},{61:[1,223]},{45:[1,224],46:[1,225]},o($VQ,[2,104]),{31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,56:[1,226]},o($VQ,[2,81],{83:227,84:[1,228]}),{63:[2,90],88:229,89:230,90:$VW,92:[1,231]},o($VX,[2,86]),{18:47,20:$V3,22:233,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo,91:232},o($VQ,[2,92]),{18:47,20:$V3,22:234,29:$Vk,37:41,44:42,51:43,52:$Vl,53:$Vm,54:$Vn,55:$Vo},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:235,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{45:[1,236]},{46:[1,237]},o($VQ,[2,93]),o($VQ,[2,79]),{61:[1,238]},{63:[1,239]},o($VX,[2,85]),{21:[1,240]},{21:[1,241]},{21:[2,88],31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv},{31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,56:[1,242]},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,243],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{56:[1,244]},{56:[1,245]},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:246,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},o($VQ,[2,82]),{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:247,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,62:248,65:83,67:80,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},o($VQ,[2,105]),o($VQ,[2,94]),{61:[2,97]},{61:[2,98]},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[1,249],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},{7:81,9:82,11:97,15:$V0,16:$V1,17:$V2,18:98,20:$V3,23:$V4,63:[2,89],65:83,67:132,68:84,69:85,70:86,71:$VE,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO},o($VX,[2,87],{7:81,9:82,65:83,68:84,69:85,70:86,72:88,73:89,74:90,75:91,76:92,77:93,78:94,79:95,80:96,11:97,18:98,67:132,15:$V0,16:$V1,17:$V2,20:$V3,23:$V4,71:$VE,81:$VF,85:$VG,93:$VH,94:$VI,95:$VJ,97:$VK,100:$VL,101:$VM,102:$VN,103:$VO}),o($VQ,[2,80])],
defaultActions: {18:[2,1],77:[2,20],141:[2,99],161:[2,95],187:[2,83],188:[2,84],244:[2,97],245:[2,98]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* espacios en blanco se ignoran */
break;
case 1:/* espacios en blanco se ignoran */
break;
case 2:/* espacios en blanco se ignoran */
break;
case 3:return 29
break;
case 4:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 54;
break;
case 5:return 47
break;
case 6:return 48
break;
case 7:return 46
break;
case 8:return 45
break;
case 9:return 50
break;
case 10:return 49
break;
case 11:return 55
break;
case 12:return 56
break;
case 13:return 61
break;
case 14:return 63
break;
case 15:return 26
break;
case 16:return 28
break;
case 17:return 21
break;
case 18:return 14
break;
case 19:return 19
break;
case 20:return 30
break;
case 21:return 38
break;
case 22:return 66
break;
case 23:return 39
break;
case 24:return 42
break;
case 25:return 43
break;
case 26:return 40
break;
case 27:return 41
break;
case 28:return 31
break;
case 29:return 35
break;
case 30:return 32
break;
case 31:return 31
break;
case 32:return 33
break;
case 33:return 36
break;
case 34:return 15
break;
case 35:return 17
break;
case 36:return 16
break;
case 37:return 64
break;
case 38:return 81
break;
case 39:return 16
break;
case 40:return 23
break;
case 41:return 25
break;
case 42:return 81
break;
case 43:return 82
break;
case 44:return 84
break;
case 45:return 85
break;
case 46:return 90
break;
case 47:return 92
break;
case 48:return 100
break;
case 49:return 71
break;
case 50:return 101
break;
case 51:return 93
break;
case 52:return 94
break;
case 53:return 95
break;
case 54:return 96
break;
case 55:return 97
break;
case 56:return 102
break;
case 57:return 103
break;
case 58:return 104
break;
case 59:return 106
break;
case 60:return 'getBool'
break;
case 61:return 'getNum'
break;
case 62:return 'outStr'
break;
case 63:return 'outNum'
break;
case 64:return 'inStr'
break;
case 65:return 'inNum'
break;
case 66:return 'show'
break;
case 67:return 'getRandom'
break;
case 68:return 'getLength'
break;
case 69:return 'throws'
break;
case 70:return 'NullPoinerException'
break;
case 71:return 'MissingReturnStatement'
break;
case 72:return 'ArithmeticException'
break;
case 73:return 'StackOverFlowException'
break;
case 74:return 'HeapOverFlowException'
break;
case 75:return 'PoolOverFlowException'
break;
case 76:return 52
break;
case 77:return 53
break;
case 78:return 20
break;
case 79:return 5
break;
case 80:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\r)/,/^(?:\n)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.\.)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:bool\b)/,/^(?:str\b)/,/^(?:num\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:num\b)/,/^(?:array\b)/,/^(?:of\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:Principal\b)/,/^(?:getBool\b)/,/^(?:getNum\b)/,/^(?:outStr\b)/,/^(?:outNum\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:throws\b)/,/^(?:NullPoinerException\b)/,/^(?:MissingReturnStatement\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Avanzado;
exports.Parser = Avanzado.Parser;
exports.parse = function () { return Avanzado.parse.apply(Avanzado, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
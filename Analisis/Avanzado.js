/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Avanzado = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,10],$V5=[1,16],$V6=[1,11],$V7=[5,15,16,17,18,22,62,102],$V8=[20,25],$V9=[1,20],$Va=[2,54],$Vb=[1,23],$Vc=[14,18,20,25],$Vd=[2,12],$Ve=[14,19,20],$Vf=[1,30],$Vg=[2,22],$Vh=[1,32],$Vi=[1,44],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,45],$Vn=[1,46],$Vo=[5,15,16,17,18,22,61,62,69,78,82,87,89,90,91,92,94,97,98,99,100,102],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[14,18,19,20,30,31,32,33,34,35,55],$Vw=[14,18,19,20,30,31,32,33,34,35,37,38,39,40,41,42,55],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[14,18,19,20,30,31,32,33,34,35,37,38,39,40,41,42,44,45,46,47,48,49,55],$VC=[19,20,24,25,55],$VD=[1,94],$VE=[1,84],$VF=[1,95],$VG=[1,96],$VH=[1,99],$VI=[1,100],$VJ=[1,104],$VK=[1,101],$VL=[1,97],$VM=[1,98],$VN=[1,102],$VO=[1,103],$VP=[19,55],$VQ=[15,16,17,18,22,61,69,78,82,87,89,90,91,92,94,97,98,99,100],$VR=[14,18,19,20,30,34,55],$VS=[14,18,19,20,30,31,33,34,55],$VT=[14,18,19,20,30,31,32,33,34,35,37,38,39,40,41,42,44,45,55],$VU=[14,18,19,20,30,31,32,33,34,35,37,38,39,40,41,42,44,45,46,47,48,55],$VV=[1,210],$VW=[61,87,89];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"BASIC":4,"EOF":5,"BSENT":6,"DECVAR":7,"DECFUN":8,"DECARR":9,"PRINCIPAL":10,"TVAR":11,"LIDC":12,"VALVAR":13,";":14,"tbool":15,"tnum":16,"tstr":17,"id":18,",":19,":":20,"EXP":21,"array":22,"LCV":23,"of":24,"[":25,"INDICE":26,"]":27,"num":28,"..":29,"||":30,"&&":31,"|&":32,"&?":33,"|?":34,"!":35,"EXP1":36,"==":37,"!=":38,">":39,"<":40,">=":41,"<=":42,"EXP2":43,"+":44,"-":45,"*":46,"/":47,"%":48,"^":49,"EXP3":50,"true":51,"false":52,"cad":53,"(":54,")":55,"TFUN":56,"LC":57,"LPAR":58,"{":59,"CUERPO":60,"}":61,"tvoid":62,"ASIGNACION":63,"=":64,"SENT":65,"IF":66,"SWITCH":67,"BREAK":68,"continue":69,"RETURN":70,"WHILE":71,"DOWHILE":72,"FOR":73,"LOOP":74,"COUNT":75,"DOWHILEX":76,"REPEAT":77,"if":78,"then":79,"ELSE":80,"else":81,"switch":82,"MODO":83,"CASOS":84,"DEFECTO":85,"CASO":86,"case":87,"VALCASE":88,"default":89,"while":90,"do":91,"repeat":92,"until":93,"for":94,"VARFOR":95,"OPFOR":96,"break":97,"return":98,"loop":99,"count":100,"whilex":101,"principal":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:";",15:"tbool",16:"tnum",17:"tstr",18:"id",19:",",20:":",22:"array",24:"of",25:"[",27:"]",28:"num",29:"..",30:"||",31:"&&",32:"|&",33:"&?",34:"|?",35:"!",37:"==",38:"!=",39:">",40:"<",41:">=",42:"<=",44:"+",45:"-",46:"*",47:"/",48:"%",49:"^",51:"true",52:"false",53:"cad",54:"(",55:")",59:"{",61:"}",62:"tvoid",64:"=",69:"continue",78:"if",79:"then",81:"else",82:"switch",87:"case",89:"default",90:"while",91:"do",92:"repeat",93:"until",94:"for",97:"break",98:"return",99:"loop",100:"count",101:"whilex",102:"principal"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[7,4],[11,1],[11,1],[11,1],[11,1],[12,3],[12,1],[13,2],[13,0],[9,7],[23,4],[23,3],[26,3],[26,1],[26,0],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,3],[8,10],[56,1],[56,1],[57,1],[57,0],[58,5],[58,3],[58,0],[63,3],[60,2],[60,1],[65,1],[65,1],[65,2],[65,1],[65,1],[65,2],[65,2],[65,2],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[66,9],[80,4],[80,0],[67,10],[83,1],[83,1],[84,2],[84,1],[86,4],[88,1],[85,3],[85,0],[71,7],[72,8],[77,8],[73,12],[95,3],[95,4],[96,2],[96,2],[68,2],[68,1],[70,3],[70,1],[74,5],[75,7],[76,10],[10,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	   	return $$[$0-1];
	   
break;
case 3: case 4: case 5: case 6: case 12: case 15: case 29: case 36: case 43: case 51: case 53: case 61: case 62: case 64: case 65: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 85:
this.$=$$[$0];
break;
case 8:
this.$={nombre:'dec',tipo:$$[$0-3],hijos:[$$[$0-2],$$[$0-1]]};
break;
case 9:
this.$='tbool';
break;
case 10:
this.$='tnum';
break;
case 11:
this.$='tstr'
break;
case 13:
$$[$0-2].hijos.push($$[$0]);this.$=$$[$0-2];
break;
case 14:
this.$={nombre:'lid',hijos:[$$[$0]]};
break;
case 16: case 54: case 78: case 87:
this.$=null;
break;
case 17:
this.$={nombre:'array',tipo:$$[$0-1],valor:$$[$0-4],hijos:[$$[$0-3]]};
break;
case 18:
$$[$0-3].hijos.push($$[$0-1]);this.$=$$[$0-3];
break;
case 19:
this.$={nombre:'lcv',hijos:[$$[$0-1]]};
break;
case 20:
this.$={nombre:'indice',inf:$$[$0-2],sup:$$[$0]};
break;
case 21:
this.$={nombre:'indice',inf:0,sup:$$[$0]};
break;
case 22:
this.$={nombre:'indice',inf:-1,sup:-1};
break;
case 23:
this.$={nombre:'||',hijos: [$$[$0-2] , $$[$0]]};
break;
case 24:
this.$={nombre:'&&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 25:
this.$={nombre:'|&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 26:
this.$={nombre:'&?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 27:
this.$={nombre:'|?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 28:
this.$={nombre:'!',hijos: [$$[$0-2] , $$[$0]]};
break;
case 30:
this.$={nombre:'==',hijos: [$$[$0-2] , $$[$0]]};
break;
case 31:
this.$={nombre:'!=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 32:
this.$={nombre:'>',hijos: [$$[$0-2] , $$[$0]]};
break;
case 33:
this.$={nombre:'<',hijos: [$$[$0-2] , $$[$0]]};
break;
case 34:
this.$={nombre:'>=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 35:
this.$={nombre:'<=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 37:
this.$={nombre:'+',hijos: [$$[$0-2] , $$[$0]]};
break;
case 38:
this.$={nombre:'-',hijos: [$$[$0-2] , $$[$0]]};
break;
case 39:
this.$={nombre:'*',hijos: [$$[$0-2] , $$[$0]]};
break;
case 40:
this.$={nombre:'/',hijos: [$$[$0-2] , $$[$0]]};
break;
case 41:
this.$={nombre:'%',hijos: [$$[$0-2] , $$[$0]]};
break;
case 42:
this.$={nombre:'^',hijos: [$$[$0-2] , $$[$0]]};
break;
case 44:
this.$={nombre:'valor',tipo:'num', valor : $$[$0]};
break;
case 45:
this.$={nombre:'valor',tipo:'bool', valor : 'true'};
break;
case 46:
this.$={nombre:'valor',tipo:'bool', valor : 'false'};
break;
case 47:
this.$={nombre:'valor',tipo:'id', valor : $$[$0]};
break;
case 48:
this.$={nombre:'valor',tipo:'cad', valor : $$[$0]};
break;
case 49: case 63: case 66: case 68: case 77:
this.$=$$[$0-1];
break;
case 50:

		this.$={nombre:'decfun',tipo:$$[$0-9],valor:$$[$0-6],hijos:[]};
		if($$[$0-8] !== null){
		this.$.hijos.push($$[$0-8]);
		}else{
		this.$.hijos.push($$[$0-4]);
		this.$.hijos.push($$[$0-1]);
		}
		
break;
case 52:
this.$='tvoid'
break;
case 55:
var v={nombre:$$[$0-3],tipo:$$[$0-4],hijos:[$$[$0-1]]};$$[$0-4].hijos.push(v);this.$=$$[$0-4];
break;
case 56:
var v={nombre:$$[$0-1],tipo:$$[$0-2],hijos:[$$[$0]]};this.$={nombre:'lpar',hijos:[v]};
break;
case 57:
this.$={nombre:'lpar'};
break;
case 58:
this.$ = {nombre:'asig',hijos:[$$[$0-2],$$[$0]]};
break;
case 59: case 82:
$$[$0-1].hijos.push($$[$0]);this.$=$$[$0-1];
break;
case 60:
this.$={nombre:'cuerpo',hijos:[$$[$0]]};
break;
case 67:
this.$={nombre:'continue'};
break;
case 76:

	 this.$={nombre:'if',hijos:[$$[$0-6],$$[$0-2]]};
	 if($$[$0]!==null){
	 this.$.hijos.push($$[$0]);
	 }
	 
break;
case 79:

	   this.$={nombre:'switch',hijos:[$$[$0-7],$$[$0-5],$$[$0-2],$$[$0-1]]};
	   
break;
case 80:
this.$='true';
break;
case 81:
this.$='false';
break;
case 83:
this.$={nombre:'casos',hijos:[$$[$0]]};
break;
case 84:
this.$={nombre:'case',hijos:[$$[$0-2],$$[$0]]};
break;
case 86:
this.$={nombre:'default',hijos:[$$[$0]]};
break;
case 88:
this.$={nombre:'while',hijos:[$$[$0-4],$$[$0-1]]};
break;
case 89:
this.$={nombre:'dowhile',hijos:[$$[$0-5],$$[$0-1]]};
break;
case 90:
this.$={nombre:'repeat',hijos:[$$[$0-5],$$[$0-2]]};
break;
case 96:
this.$={nombre:'break',hijos:[$$[$0]]};
break;
case 97:
this.$={nombre:'break'};
break;
case 98:
this.$={nombre:'return',hijos:[$$[$0-1]]};
break;
case 99:
this.$={nombre:'return'};
break;
case 100:
this.$={nombre:'loop',hijos:[$$[$0-1]]};
break;
case 101:
this.$={nombre:'count',hijos:[$$[$0-4],$$[$0-1]]};
break;
case 102:
this.$={nombre:'dowhilex',hijos:[$$[$0-7],$$[$0-3],$$[$0-1]]};
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,15:$V0,16:$V1,17:$V2,18:$V3,22:$V4,56:9,62:$V5,102:$V6},{1:[3]},{5:[1,17],6:18,7:4,8:5,9:6,10:7,11:8,15:$V0,16:$V1,17:$V2,18:$V3,22:$V4,56:9,62:$V5,102:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),o($V8,[2,51],{12:19,18:$V9}),{20:$Va,23:22,25:$Vb,57:21},{20:[1,24]},{54:[1,25]},o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,$Vd),o($V8,[2,52]),{1:[2,1]},o($V7,[2,2]),{13:26,14:[2,16],19:[1,27],20:[1,28]},o($Ve,[2,14]),{20:[1,29]},o([19,20,55],[2,53],{25:$Vf}),{26:31,27:$Vg,28:$Vh},{18:[1,33]},{55:[1,34]},{14:[1,35]},{18:[1,36]},{18:$Vi,21:37,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:[1,47]},{26:48,27:$Vg,28:$Vh},{27:[1,49]},{27:[2,21],29:[1,50]},{23:51,25:$Vb},{59:[1,52]},o($Vo,[2,8]),o($Ve,[2,13]),{14:[2,15],30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu},o($Vv,[2,29],{37:[1,59],38:[1,60],39:[1,61],40:[1,62],41:[1,63],42:[1,64]}),o($Vw,[2,36],{44:[1,65],45:[1,66],46:$Vx,47:$Vy,48:$Vz,49:$VA}),o($VB,[2,43]),o($VB,[2,44]),o($VB,[2,45]),o($VB,[2,46]),o($VB,[2,47]),o($VB,[2,48]),{18:$Vi,21:71,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{54:[1,72]},{27:[1,73]},o($VC,[2,19]),{28:[1,74]},{24:[1,75],25:$Vf},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:76,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{18:$Vi,21:105,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,21:106,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,21:107,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,21:108,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,21:109,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,21:110,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,36:111,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,36:112,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,36:113,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,36:114,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,36:115,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,36:116,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,43:117,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,43:118,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,43:119,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,43:120,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,43:121,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,28:$Vj,43:122,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,55:[1,123]},o($VP,[2,57],{58:124,11:125,15:$V0,16:$V1,17:$V2,18:$V3}),o($VC,[2,18]),{27:[2,20]},{11:126,15:$V0,16:$V1,17:$V2,18:$V3},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,127],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,62]),{14:[1,129]},o($VQ,[2,64]),o($VQ,[2,65]),{14:[1,130]},{14:[1,131]},{14:[1,132]},o($VQ,[2,69]),o($VQ,[2,70]),o($VQ,[2,71]),o($VQ,[2,72]),o($VQ,[2,73]),o($VQ,[2,74]),o($VQ,[2,75]),{12:19,18:$V9},{18:$Vd,64:[1,133]},{54:[1,134]},{54:[1,135]},{14:[2,97],18:[1,136]},{14:[2,99],18:$Vi,21:137,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{54:[1,138]},{59:[1,139]},{54:[1,140]},{18:[1,141]},{54:[1,142]},{59:[1,143]},o($VR,[2,23],{31:$Vq,32:$Vr,33:$Vs,35:$Vu}),o($VS,[2,24],{32:$Vr,35:$Vu}),o([14,18,19,20,30,31,32,33,34,55],[2,25],{35:$Vu}),o($VS,[2,26],{32:$Vr,35:$Vu}),o($VR,[2,27],{31:$Vq,32:$Vr,33:$Vs,35:$Vu}),o($Vv,[2,28]),o($Vw,[2,30]),o($Vw,[2,31]),o($Vw,[2,32]),o($Vw,[2,33]),o($Vw,[2,34]),o($Vw,[2,35]),o($VT,[2,37],{46:$Vx,47:$Vy,48:$Vz,49:$VA}),o($VT,[2,38],{46:$Vx,47:$Vy,48:$Vz,49:$VA}),o($VU,[2,39],{49:$VA}),o($VU,[2,40],{49:$VA}),o($VU,[2,41],{49:$VA}),o($VU,[2,42],{49:$VA}),o($VB,[2,49]),{19:[1,145],55:[1,144]},{18:[1,146]},{14:[1,147]},o($V7,[2,103]),o($VQ,[2,59]),o($VQ,[2,63]),o($VQ,[2,66]),o($VQ,[2,67]),o($VQ,[2,68]),{18:$Vi,21:148,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,21:149,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,21:150,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{14:[2,96]},{18:[1,151],30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu},{18:$Vi,21:152,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:153,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{16:[1,156],18:[1,155],95:154},{59:[1,157]},{18:$Vi,21:158,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:159,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{59:[1,160]},{11:161,15:$V0,16:$V1,17:$V2,18:$V3},o($VP,$Va,{23:22,57:162,25:$Vb}),o($Vo,[2,17]),{14:[2,58],30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu},{30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,55:[1,163]},{19:[1,164],30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu},{14:[2,98]},{30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,55:[1,165]},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,166],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{14:[1,167]},{64:[1,168]},{18:[1,169]},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:170,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,55:[1,171]},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,172],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:173,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{18:[1,174]},o($VP,[2,56]),{79:[1,175]},{51:[1,177],52:[1,178],83:176},{59:[1,179]},{90:[1,180],101:[1,181]},{18:$Vi,21:182,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,21:183,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{64:[1,184]},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,185],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{59:[1,186]},{93:[1,187]},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,188],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($VP,$Va,{23:22,57:189,25:$Vb}),{59:[1,190]},{55:[1,191]},{55:[2,80]},{55:[2,81]},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:192,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{54:[1,193]},{54:[1,194]},{14:[1,195],30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu},{14:[2,92],30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu},{18:$Vi,21:196,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},o($VQ,[2,100]),{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:197,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{54:[1,198]},o($V7,[2,50]),o($VP,[2,55]),{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:199,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{59:[1,200]},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,201],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{18:$Vi,21:202,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:$Vi,21:203,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{18:[1,204]},{14:[2,93],30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,205],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{18:$Vi,21:206,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,207],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{84:208,86:209,87:$VV},o($VQ,[2,88]),{30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,55:[1,211]},{19:[1,212],30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu},{44:[1,214],45:[1,215],96:213},o($VQ,[2,101]),{30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,55:[1,216]},o($VQ,[2,78],{80:217,81:[1,218]}),{61:[2,87],85:219,86:220,87:$VV,89:[1,221]},o($VW,[2,83]),{18:$Vi,21:223,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn,88:222},o($VQ,[2,89]),{18:$Vi,21:224,28:$Vj,36:38,43:39,50:40,51:$Vk,52:$Vl,53:$Vm,54:$Vn},{55:[1,225]},{44:[1,226]},{45:[1,227]},o($VQ,[2,90]),o($VQ,[2,76]),{59:[1,228]},{61:[1,229]},o($VW,[2,82]),{20:[1,230]},{20:[1,231]},{20:[2,85],30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu},{30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,55:[1,232]},{59:[1,233]},{55:[2,94]},{55:[2,95]},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:234,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($VQ,[2,79]),{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:235,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:236,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($VQ,[2,102]),{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,60:237,63:80,65:77,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,238],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[2,86],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($VW,[2,84],{7:78,9:79,63:80,66:81,67:82,68:83,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,11:93,65:128,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,69:$VE,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO}),{7:78,9:79,11:93,15:$V0,16:$V1,17:$V2,18:$VD,22:$V4,61:[1,239],63:80,65:128,66:81,67:82,68:83,69:$VE,70:85,71:86,72:87,73:88,74:89,75:90,76:91,77:92,78:$VF,82:$VG,90:$VH,91:$VI,92:$VJ,94:$VK,97:$VL,98:$VM,99:$VN,100:$VO},o($VQ,[2,77]),o($VQ,[2,91])],
defaultActions: {17:[2,1],74:[2,20],136:[2,96],151:[2,98],177:[2,80],178:[2,81],226:[2,94],227:[2,95]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* espacios en blanco se ignoran */
break;
case 1:/* espacios en blanco se ignoran */
break;
case 2:/* espacios en blanco se ignoran */
break;
case 3:return 28
break;
case 4:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 53;
break;
case 5:return 46
break;
case 6:return 47
break;
case 7:return 45
break;
case 8:return 44
break;
case 9:return 49
break;
case 10:return 48
break;
case 11:return 54
break;
case 12:return 55
break;
case 13:return 59
break;
case 14:return 61
break;
case 15:return 25
break;
case 16:return 27
break;
case 17:return 20
break;
case 18:return 14
break;
case 19:return 19
break;
case 20:return 29
break;
case 21:return 37
break;
case 22:return 64
break;
case 23:return 38
break;
case 24:return 41
break;
case 25:return 42
break;
case 26:return 39
break;
case 27:return 40
break;
case 28:return 30
break;
case 29:return 34
break;
case 30:return 31
break;
case 31:return 30
break;
case 32:return 32
break;
case 33:return 35
break;
case 34:return 15
break;
case 35:return 17
break;
case 36:return 16
break;
case 37:return 62
break;
case 38:return 78
break;
case 39:return 16
break;
case 40:return 22
break;
case 41:return 24
break;
case 42:return 78
break;
case 43:return 79
break;
case 44:return 81
break;
case 45:return 82
break;
case 46:return 87
break;
case 47:return 89
break;
case 48:return 97
break;
case 49:return 69
break;
case 50:return 98
break;
case 51:return 90
break;
case 52:return 91
break;
case 53:return 92
break;
case 54:return 93
break;
case 55:return 94
break;
case 56:return 99
break;
case 57:return 100
break;
case 58:return 101
break;
case 59:return 102
break;
case 60:return 51
break;
case 61:return 52
break;
case 62:return 18
break;
case 63:return 5
break;
case 64:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\r)/,/^(?:\n)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.\.)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:bool\b)/,/^(?:str\b)/,/^(?:num\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:num\b)/,/^(?:array\b)/,/^(?:of\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:principal\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Avanzado;
exports.Parser = Avanzado.Parser;
exports.parse = function () { return Avanzado.parse.apply(Avanzado, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
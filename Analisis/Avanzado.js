/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Avanzado = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,10],$V5=[1,16],$V6=[1,11],$V7=[5,15,16,17,18,22,62,102],$V8=[1,21],$V9=[1,23],$Va=[14,18,20,25],$Vb=[2,12],$Vc=[14,19,20],$Vd=[1,30],$Ve=[1,39],$Vf=[2,22],$Vg=[1,36],$Vh=[1,37],$Vi=[1,38],$Vj=[1,40],$Vk=[1,41],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[14,19,20,27,28,29,30,31,32,33,34,55],$Vs=[14,19,20,27,28,29,30,31,32,33,34,36,37,38,39,40,41,55],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[14,19,20,27,28,29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,48,55],$Vy=[5,15,16,17,18,22,60,62,69,78,82,87,89,90,91,92,94,97,98,99,100,102],$Vz=[20,24,25],$VA=[19,55],$VB=[1,115],$VC=[1,105],$VD=[1,116],$VE=[1,117],$VF=[1,120],$VG=[1,121],$VH=[1,125],$VI=[1,122],$VJ=[1,118],$VK=[1,119],$VL=[1,123],$VM=[1,124],$VN=[14,19,20,27,28,29,33,55],$VO=[14,19,20,27,28,29,30,32,33,55],$VP=[14,19,20,27,28,29,30,31,32,33,34,36,37,38,39,40,41,43,44,55],$VQ=[14,19,20,27,28,29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,55],$VR=[15,16,17,18,22,60,69,78,82,87,89,90,91,92,94,97,98,99,100],$VS=[1,207],$VT=[60,87,89];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"BASIC":4,"EOF":5,"BSENT":6,"DECVAR":7,"DECFUN":8,"DECARR":9,"PRINCIPAL":10,"TVAR":11,"LIDC":12,"VALVAR":13,";":14,"tbool":15,"tnum":16,"tstr":17,"id":18,",":19,":":20,"EXP":21,"array":22,"LCV":23,"of":24,"[":25,"INDICE":26,"]":27,"..":28,"||":29,"&&":30,"|&":31,"&?":32,"|?":33,"!":34,"EXP1":35,"==":36,"!=":37,">":38,"<":39,">=":40,"<=":41,"EXP2":42,"+":43,"-":44,"*":45,"/":46,"%":47,"^":48,"EXP3":49,"num":50,"true":51,"false":52,"cad":53,"(":54,")":55,"TFUN":56,"LPAR":57,"{":58,"CUERPO":59,"}":60,"LC":61,"tvoid":62,"ASIGNACION":63,"=":64,"SENT":65,"IF":66,"SWITCH":67,"BREAK":68,"continue":69,"RETURN":70,"WHILE":71,"DOWHILE":72,"FOR":73,"LOOP":74,"COUNT":75,"DOWHILEX":76,"REPEAT":77,"if":78,"then":79,"ELSE":80,"else":81,"switch":82,"MODO":83,"CASOS":84,"DEFECTO":85,"CASO":86,"case":87,"VALCASE":88,"default":89,"while":90,"do":91,"repeat":92,"until":93,"for":94,"VARFOR":95,"OPFOR":96,"break":97,"return":98,"loop":99,"count":100,"whilex":101,"principal":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:";",15:"tbool",16:"tnum",17:"tstr",18:"id",19:",",20:":",22:"array",24:"of",25:"[",27:"]",28:"..",29:"||",30:"&&",31:"|&",32:"&?",33:"|?",34:"!",36:"==",37:"!=",38:">",39:"<",40:">=",41:"<=",43:"+",44:"-",45:"*",46:"/",47:"%",48:"^",50:"num",51:"true",52:"false",53:"cad",54:"(",55:")",58:"{",60:"}",62:"tvoid",64:"=",69:"continue",78:"if",79:"then",81:"else",82:"switch",87:"case",89:"default",90:"while",91:"do",92:"repeat",93:"until",94:"for",97:"break",98:"return",99:"loop",100:"count",101:"whilex",102:"principal"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[7,4],[11,1],[11,1],[11,1],[11,1],[12,3],[12,1],[13,2],[13,0],[9,7],[23,4],[23,3],[26,3],[26,1],[26,0],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,3],[8,9],[56,2],[56,1],[61,1],[61,0],[57,4],[57,2],[57,0],[63,3],[59,2],[59,1],[65,1],[65,1],[65,2],[65,1],[65,1],[65,2],[65,2],[65,2],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[66,9],[80,4],[80,0],[67,10],[83,1],[83,1],[84,2],[84,1],[86,4],[88,1],[85,3],[85,0],[71,7],[72,8],[77,8],[73,12],[95,3],[95,4],[96,2],[96,2],[68,2],[68,1],[70,2],[70,1],[74,5],[75,7],[76,10],[10,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	   	return $$[$0-1];
	   
break;
case 3: case 4: case 5: case 6: case 12: case 15: case 29: case 36: case 61: case 62:
this.$=$$[$0];
break;
case 8:
this.$={nombre:'dec',tipo:$$[$0-3],hijos:[$$[$0-2],$$[$0-1]]};
break;
case 9:
this.$='tbool';
break;
case 10:
this.$='tnum';
break;
case 11:
this.$='tstr'
break;
case 13:
$$[$0-2].hijos.push($$[$0]);this.$=$$[$0-2];
break;
case 14:
this.$={nombre:'lid',hijos:[$$[$0]]};
break;
case 16:
this.$=null;
break;
case 17:
this.$={nombre:'array',tipo:$$[$0-1],valor:$$[$0-4],hijos:[$$[$0-3]]};
break;
case 18:
$$[$0-3].hijos.push($$[$0-1]);this.$=$$[$0-3];
break;
case 19:
this.$={nombre:'lcv',hijos:[$$[$0-1]]};
break;
case 23:
this.$={nombre:'||',hijos: [$$[$0-2] , $$[$0]]};
break;
case 24:
this.$={nombre:'&&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 25:
this.$={nombre:'|&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 26:
this.$={nombre:'<&?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 27:
this.$={nombre:'|?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 28:
this.$={nombre:'!',hijos: [$$[$0-2] , $$[$0]]};
break;
case 30:
this.$={nombre:'==',hijos: [$$[$0-2] , $$[$0]]};
break;
case 31:
this.$={nombre:'!=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 32:
this.$={nombre:'>',hijos: [$$[$0-2] , $$[$0]]};
break;
case 33:
this.$={nombre:'<',hijos: [$$[$0-2] , $$[$0]]};
break;
case 34:
this.$={nombre:'>=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 35:
this.$={nombre:'<=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 37:
this.$={nombre:'+',hijos: [$$[$0-2] , $$[$0]]};
break;
case 38:
this.$={nombre:'-',hijos: [$$[$0-2] , $$[$0]]};
break;
case 39:
this.$={nombre:'*',hijos: [$$[$0-2] , $$[$0]]};
break;
case 40:
this.$={nombre:'/',hijos: [$$[$0-2] , $$[$0]]};
break;
case 41:
this.$={nombre:'%',hijos: [$$[$0-2] , $$[$0]]};
break;
case 42:
this.$={nombre:'^',hijos: [$$[$0-2] , $$[$0]]};
break;
case 44:
this.$={nombre:'valor',tipo:'num', valor : $$[$0]};
break;
case 45:
this.$={nombre:'valor',tipo:'bool', valor : 'true'};
break;
case 46:
this.$={nombre:'valor',tipo:'bool', valor : 'false'};
break;
case 47:
this.$={nombre:'valor',tipo:'id', valor : $$[$0]};
break;
case 48:
this.$={nombre:'valor',tipo:'cad', valor : $$[$0]};
break;
case 49:
this.$=$$[$0-1];
break;
case 50:

		this.$={nombre:'decfun',tipo:$$[$0-8],valor:$$[$0-6],hijos:[$$[$0-4],$$[$0-1]]};
		
break;
case 52:
this.$='tvoid'
break;
case 55:
var v={nombre:$$[$0-2],tipo:$$[$0-3]};$$[$0-3].hijos.push(v);this.$=$$[$0-3];
break;
case 56:
var v={nombre:$$[$0],tipo:$$[$0-1]};this.$={nombre:'lpar',hijos:[v]};
break;
case 57:
this.$={nombre:'lpar'};
break;
case 58:
this.$ = {nombre:'asig',hijos:[$$[$0-2],$$[$0]]};
break;
case 59:
$$[$0-1].hijos.push($$[$0]);this.$=$$[$0-1];
break;
case 60:
this.$={nombre:'cuerpo',hijos:[$$[$0]]};
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,15:$V0,16:$V1,17:$V2,18:$V3,22:$V4,56:9,62:$V5,102:$V6},{1:[3]},{5:[1,17],6:18,7:4,8:5,9:6,10:7,11:8,15:$V0,16:$V1,17:$V2,18:$V3,22:$V4,56:9,62:$V5,102:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),{12:19,18:$V8,20:[2,54],23:22,25:$V9,61:20},{20:[1,24]},{20:[1,25]},{54:[1,26]},o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,$Vb),{20:[2,52]},{1:[2,1]},o($V7,[2,2]),{13:27,14:[2,16],19:[1,28],20:[1,29]},{20:[2,51]},o($Vc,[2,14]),{20:[2,53],25:$Vd},{18:$Ve,21:32,26:31,27:$Vf,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:[1,42]},{18:[1,43]},{55:[1,44]},{14:[1,45]},{18:[1,46]},{18:$Ve,21:47,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:32,26:48,27:$Vf,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{27:[1,49]},{27:[2,21],28:[1,50],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},o($Vr,[2,29],{36:[1,57],37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62]}),o($Vs,[2,36],{43:[1,63],44:[1,64],45:$Vt,46:$Vu,47:$Vv,48:$Vw}),o($Vx,[2,43]),o($Vx,[2,44]),o($Vx,[2,45]),o($Vx,[2,46]),o($Vx,[2,47]),o($Vx,[2,48]),{18:$Ve,21:69,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{54:[1,70]},{23:71,25:$V9},{58:[1,72]},o($Vy,[2,8]),o($Vc,[2,13]),{14:[2,15],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},{27:[1,73]},o($Vz,[2,19]),{18:$Ve,21:74,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:75,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:76,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:77,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:78,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:79,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:80,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,35:81,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,35:82,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,35:83,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,35:84,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,35:85,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,35:86,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,42:87,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,42:88,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,42:89,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,42:90,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,42:91,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,42:92,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,55:[1,93]},o($VA,[2,57],{57:94,11:95,15:$V0,16:$V1,17:$V2,18:$V3}),{24:[1,96],25:$Vd},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:97,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},o($Vz,[2,18]),{27:[2,20],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},o($VN,[2,23],{30:$Vm,31:$Vn,32:$Vo,34:$Vq}),o($VO,[2,24],{31:$Vn,34:$Vq}),o([14,19,20,27,28,29,30,31,32,33,55],[2,25],{34:$Vq}),o($VO,[2,26],{31:$Vn,34:$Vq}),o($VN,[2,27],{30:$Vm,31:$Vn,32:$Vo,34:$Vq}),o($Vr,[2,28]),o($Vs,[2,30]),o($Vs,[2,31]),o($Vs,[2,32]),o($Vs,[2,33]),o($Vs,[2,34]),o($Vs,[2,35]),o($VP,[2,37],{45:$Vt,46:$Vu,47:$Vv,48:$Vw}),o($VP,[2,38],{45:$Vt,46:$Vu,47:$Vv,48:$Vw}),o($VQ,[2,39],{48:$Vw}),o($VQ,[2,40],{48:$Vw}),o($VQ,[2,41],{48:$Vw}),o($VQ,[2,42],{48:$Vw}),o($Vx,[2,49]),{19:[1,127],55:[1,126]},{18:[1,128]},{11:129,15:$V0,16:$V1,17:$V2,18:$V3},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,130],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},o($VR,[2,60]),o($VR,[2,61]),o($VR,[2,62]),{14:[1,132]},o($VR,[2,64]),o($VR,[2,65]),{14:[1,133]},{14:[1,134]},{14:[1,135]},o($VR,[2,69]),o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),o($VR,[2,74]),o($VR,[2,75]),{12:19,18:$V8},{18:$Vb,64:[1,136]},{54:[1,137]},{54:[1,138]},{14:[2,97],18:[1,139]},{14:[2,99],18:$Ve,21:140,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{54:[1,141]},{58:[1,142]},{54:[1,143]},{18:[1,144]},{54:[1,145]},{58:[1,146]},{58:[1,147]},{11:148,15:$V0,16:$V1,17:$V2,18:$V3},o($VA,[2,56]),{14:[1,149]},o($V7,[2,103]),o($VR,[2,59]),o($VR,[2,63]),o($VR,[2,66]),o($VR,[2,67]),o($VR,[2,68]),{18:$Ve,21:150,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:151,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:152,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{14:[2,96]},{14:[2,98],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},{18:$Ve,21:153,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:154,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{16:[1,157],18:[1,156],95:155},{58:[1,158]},{18:$Ve,21:159,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:160,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:161,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{18:[1,162]},o($Vy,[2,17]),{14:[2,58],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},{29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,55:[1,163]},{19:[1,164],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},{29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,55:[1,165]},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,166],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{14:[1,167]},{64:[1,168]},{18:[1,169]},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:170,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,55:[1,171]},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,172],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,173],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},o($VA,[2,55]),{79:[1,174]},{51:[1,176],52:[1,177],83:175},{58:[1,178]},{90:[1,179],101:[1,180]},{18:$Ve,21:181,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:182,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{64:[1,183]},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,184],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{58:[1,185]},{93:[1,186]},o($V7,[2,50]),{58:[1,187]},{55:[1,188]},{55:[2,80]},{55:[2,81]},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:189,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{54:[1,190]},{54:[1,191]},{14:[1,192],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},{14:[2,92],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},{18:$Ve,21:193,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},o($VR,[2,100]),{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:194,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{54:[1,195]},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:196,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{58:[1,197]},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,198],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{18:$Ve,21:199,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:$Ve,21:200,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{18:[1,201]},{14:[2,93],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,202],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{18:$Ve,21:203,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,204],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{84:205,86:206,87:$VS},o($VR,[2,88]),{29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,55:[1,208]},{19:[1,209],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},{43:[1,211],44:[1,212],96:210},o($VR,[2,101]),{29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,55:[1,213]},o($VR,[2,78],{80:214,81:[1,215]}),{60:[2,87],85:216,86:217,87:$VS,89:[1,218]},o($VT,[2,83]),{18:$Ve,21:220,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk,88:219},o($VR,[2,89]),{18:$Ve,21:221,35:33,42:34,49:35,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk},{55:[1,222]},{43:[1,223]},{44:[1,224]},o($VR,[2,90]),o($VR,[2,76]),{58:[1,225]},{60:[1,226]},o($VT,[2,82]),{20:[1,227]},{20:[1,228]},{20:[2,85],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq},{29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,55:[1,229]},{58:[1,230]},{55:[2,94]},{55:[2,95]},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:231,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},o($VR,[2,79]),{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:232,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:233,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},o($VR,[2,102]),{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,59:234,63:101,65:98,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,235],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[2,86],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},o($VT,[2,84],{7:99,9:100,63:101,66:102,67:103,68:104,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,11:114,65:131,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,69:$VC,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM}),{7:99,9:100,11:114,15:$V0,16:$V1,17:$V2,18:$VB,22:$V4,60:[1,236],63:101,65:131,66:102,67:103,68:104,69:$VC,70:106,71:107,72:108,73:109,74:110,75:111,76:112,77:113,78:$VD,82:$VE,90:$VF,91:$VG,92:$VH,94:$VI,97:$VJ,98:$VK,99:$VL,100:$VM},o($VR,[2,77]),o($VR,[2,91])],
defaultActions: {16:[2,52],17:[2,1],20:[2,51],139:[2,96],176:[2,80],177:[2,81],223:[2,94],224:[2,95]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* espacios en blanco se ignoran */
break;
case 1:/* espacios en blanco se ignoran */
break;
case 2:/* espacios en blanco se ignoran */
break;
case 3:return 50
break;
case 4:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 53;
break;
case 5:return 45
break;
case 6:return 46
break;
case 7:return 44
break;
case 8:return 43
break;
case 9:return 48
break;
case 10:return 47
break;
case 11:return 54
break;
case 12:return 55
break;
case 13:return 58
break;
case 14:return 60
break;
case 15:return 25
break;
case 16:return 27
break;
case 17:return 20
break;
case 18:return 14
break;
case 19:return 19
break;
case 20:return 28
break;
case 21:return 36
break;
case 22:return 64
break;
case 23:return 37
break;
case 24:return 40
break;
case 25:return 41
break;
case 26:return 38
break;
case 27:return 39
break;
case 28:return 29
break;
case 29:return 33
break;
case 30:return 30
break;
case 31:return 29
break;
case 32:return 31
break;
case 33:return 34
break;
case 34:return 15
break;
case 35:return 17
break;
case 36:return 16
break;
case 37:return 62
break;
case 38:return 78
break;
case 39:return 16
break;
case 40:return 22
break;
case 41:return 24
break;
case 42:return 78
break;
case 43:return 79
break;
case 44:return 81
break;
case 45:return 82
break;
case 46:return 87
break;
case 47:return 89
break;
case 48:return 97
break;
case 49:return 69
break;
case 50:return 98
break;
case 51:return 90
break;
case 52:return 91
break;
case 53:return 92
break;
case 54:return 93
break;
case 55:return 94
break;
case 56:return 99
break;
case 57:return 100
break;
case 58:return 101
break;
case 59:return 102
break;
case 60:return 51
break;
case 61:return 52
break;
case 62:return 18
break;
case 63:return 5
break;
case 64:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\r)/,/^(?:\n)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.\.)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:bool\b)/,/^(?:str\b)/,/^(?:num\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:num\b)/,/^(?:array\b)/,/^(?:of\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:principal\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Avanzado;
exports.Parser = Avanzado.Parser;
exports.parse = function () { return Avanzado.parse.apply(Avanzado, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
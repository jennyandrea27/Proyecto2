/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Avanzado = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,17],$V4=[1,10],$V5=[1,16],$V6=[1,11],$V7=[5,15,16,17,20,23,66,107],$V8=[21,26],$V9=[1,21],$Va=[2,59],$Vb=[1,24],$Vc=[14,20,21,26],$Vd=[2,12],$Ve=[1,27],$Vf=[2,54],$Vg=[14,19,21],$Vh=[1,32],$Vi=[2,22],$Vj=[1,34],$Vk=[1,54],$Vl=[1,46],$Vm=[1,41],$Vn=[1,44],$Vo=[1,47],$Vp=[1,48],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[5,15,16,17,20,23,65,66,73,82,86,91,93,94,95,96,98,101,102,103,104,107],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[1,64],$Vy=[1,65],$Vz=[14,19,21,31,32,33,34,35,57],$VA=[14,19,21,31,32,33,34,35,38,39,40,41,42,43,57],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[14,19,21,31,32,33,34,35,38,39,40,41,42,43,45,46,47,48,49,50,57],$VG=[19,21,25,26,57],$VH=[1,94],$VI=[1,106],$VJ=[1,107],$VK=[1,110],$VL=[1,111],$VM=[1,115],$VN=[1,112],$VO=[1,108],$VP=[1,109],$VQ=[1,113],$VR=[1,114],$VS=[14,19,21,31,32,33,34,35,38,39,40,41,42,43,45,46,57],$VT=[19,57],$VU=[15,16,17,20,23,65,73,82,86,91,93,94,95,96,98,101,102,103,104],$VV=[1,146],$VW=[14,19,21,31,35,57],$VX=[14,19,21,31,32,34,35,57],$VY=[14,19,21,31,32,33,34,35,38,39,40,41,42,43,45,46,47,48,49,57],$VZ=[1,225],$V_=[65,91,93];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"BASIC":4,"EOF":5,"BSENT":6,"DECVAR":7,"DECFUN":8,"DECARR":9,"PRINCIPAL":10,"TVAR":11,"LIDC":12,"VALVAR":13,";":14,"tbool":15,"tnum":16,"tstr":17,"LIDP":18,",":19,"id":20,":":21,"EXP":22,"array":23,"LCV":24,"of":25,"[":26,"INDICE":27,"]":28,"num":29,"..":30,"||":31,"&&":32,"|&":33,"&?":34,"|?":35,"!":36,"EXP1":37,"==":38,"!=":39,">":40,"<":41,">=":42,"<=":43,"EXP2":44,"+":45,"-":46,"*":47,"/":48,"%":49,"^":50,"EXP3":51,"true":52,"false":53,"LLAMADO":54,"cad":55,"(":56,")":57,"null":58,".":59,"TFUN":60,"LC":61,"LPAR":62,"{":63,"CUERPO":64,"}":65,"tvoid":66,"ASIGNACION":67,"=":68,"SENT":69,"IF":70,"SWITCH":71,"BREAK":72,"continue":73,"RETURN":74,"WHILE":75,"DOWHILE":76,"FOR":77,"LOOP":78,"COUNT":79,"DOWHILEX":80,"REPEAT":81,"if":82,"then":83,"ELSE":84,"else":85,"switch":86,"MODO":87,"CASOS":88,"DEFECTO":89,"CASO":90,"case":91,"VALCASE":92,"default":93,"while":94,"do":95,"repeat":96,"until":97,"for":98,"VARFOR":99,"OPFOR":100,"break":101,"return":102,"loop":103,"count":104,"whilex":105,"LPARFUN":106,"principal":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:";",15:"tbool",16:"tnum",17:"tstr",19:",",20:"id",21:":",23:"array",25:"of",26:"[",28:"]",29:"num",30:"..",31:"||",32:"&&",33:"|&",34:"&?",35:"|?",36:"!",38:"==",39:"!=",40:">",41:"<",42:">=",43:"<=",45:"+",46:"-",47:"*",48:"/",49:"%",50:"^",52:"true",53:"false",55:"cad",56:"(",57:")",58:"null",59:".",63:"{",65:"}",66:"tvoid",68:"=",73:"continue",82:"if",83:"then",85:"else",86:"switch",91:"case",93:"default",94:"while",95:"do",96:"repeat",97:"until",98:"for",101:"break",102:"return",103:"loop",104:"count",105:"whilex",107:"principal"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[7,4],[11,1],[11,1],[11,1],[11,1],[12,3],[12,1],[13,2],[13,0],[9,7],[24,4],[24,3],[27,3],[27,1],[27,0],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,3],[51,1],[18,3],[18,1],[8,10],[60,1],[60,1],[61,1],[61,0],[62,5],[62,3],[62,0],[67,3],[64,2],[64,1],[69,1],[69,1],[69,2],[69,1],[69,1],[69,2],[69,2],[69,2],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,2],[70,9],[84,4],[84,0],[71,10],[87,1],[87,1],[88,2],[88,1],[90,4],[92,1],[89,3],[89,0],[75,7],[76,8],[81,8],[77,10],[99,1],[99,4],[100,4],[100,4],[72,2],[72,1],[74,2],[74,1],[78,5],[79,7],[80,10],[54,4],[106,3],[106,1],[106,0],[10,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	   	return $$[$0-1];
	   
break;
case 2: case 64: case 88:
$$[$0-1].hijos.push($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$={nombre:'basic',hijos:[$$[$0]]};
break;
case 4: case 5: case 6: case 7: case 12: case 15: case 29: case 36: case 44: case 48: case 49: case 56: case 58: case 66: case 67: case 69: case 70: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 91: case 98:
this.$=$$[$0];
break;
case 8:
this.$={nombre:'dec',tipo:$$[$0-3],hijos:[$$[$0-2],$$[$0-1]]};
break;
case 9:
this.$='bool';
break;
case 10:
this.$='num';
break;
case 11:
this.$='str'
break;
case 13: case 53:
$$[$0-2].hijos.push($$[$0]);this.$=$$[$0-2];
break;
case 14:
this.$={nombre:'lid',hijos:[$$[$0]]};
break;
case 16: case 59: case 84: case 93:
this.$=null;
break;
case 17:
this.$={nombre:'array',tipo:$$[$0-1],valor:$$[$0-4],hijos:[$$[$0-3]]};
break;
case 18:
$$[$0-3].hijos.push($$[$0-1]);this.$=$$[$0-3];
break;
case 19:
this.$={nombre:'lcv',hijos:[$$[$0-1]]};
break;
case 20:
this.$={nombre:'indice',inf:$$[$0-2],sup:$$[$0]};
break;
case 21:
this.$={nombre:'indice',inf:0,sup:$$[$0]};
break;
case 22:
this.$={nombre:'indice',inf:-1,sup:-1};
break;
case 23:
this.$={nombre:'||',hijos: [$$[$0-2] , $$[$0]]};
break;
case 24:
this.$={nombre:'&&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 25:
this.$={nombre:'|&',hijos: [$$[$0-2] , $$[$0]]};
break;
case 26:
this.$={nombre:'&?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 27:
this.$={nombre:'|?',hijos: [$$[$0-2] , $$[$0]]};
break;
case 28:
this.$={nombre:'!',hijos: [$$[$0]]};
break;
case 30:
this.$={nombre:'==',hijos: [$$[$0-2] , $$[$0]]};
break;
case 31:
this.$={nombre:'!=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 32:
this.$={nombre:'>',hijos: [$$[$0-2] , $$[$0]]};
break;
case 33:
this.$={nombre:'<',hijos: [$$[$0-2] , $$[$0]]};
break;
case 34:
this.$={nombre:'>=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 35:
this.$={nombre:'<=',hijos: [$$[$0-2] , $$[$0]]};
break;
case 37:
this.$={nombre:'+',hijos: [$$[$0-2] , $$[$0]]};
break;
case 38:
this.$={nombre:'-',hijos: [$$[$0-2] , $$[$0]]};
break;
case 39:
this.$={nombre:'*',hijos: [$$[$0-2] , $$[$0]]};
break;
case 40:
this.$={nombre:'/',hijos: [$$[$0-2] , $$[$0]]};
break;
case 41:
this.$={nombre:'%',hijos: [$$[$0-2] , $$[$0]]};
break;
case 42:
this.$={nombre:'^',hijos: [$$[$0-2] , $$[$0]]};
break;
case 43:
this.$={nombre:'-',hijos: [$$[$0]]};
break;
case 45:
this.$={nombre:'valor',tipo:'num', valor : $$[$0]};
break;
case 46:
this.$={nombre:'valor',tipo:'bool', valor : 'true'};
break;
case 47:
this.$={nombre:'valor',tipo:'bool', valor : 'false'};
break;
case 50:
this.$={nombre:'valor',tipo:'str', valor : $$[$0]};
break;
case 51: case 68: case 71: case 73: case 81: case 83:
this.$=$$[$0-1];
break;
case 52:
this.$={nombre:'null'};
break;
case 54:
this.$={nombre:'lidp',hijos:[$$[$0]]};
break;
case 55:

		this.$={nombre:'decfun',tipo:$$[$0-9],valor:$$[$0-6],hijos:[]};
		if($$[$0-8] !== null){
		this.$.hijos.push($$[$0-8]);
		}else{
		this.$.hijos.push($$[$0-4]);
		this.$.hijos.push($$[$0-1]);
		}
		
break;
case 57:
this.$='tvoid'
break;
case 60:
var v={nombre:$$[$0-3],tipo:$$[$0-4],hijos:[$$[$0-1]]};$$[$0-4].hijos.push(v);this.$=$$[$0-4];
break;
case 61:
var v={nombre:$$[$0-1],tipo:$$[$0-2],hijos:[$$[$0]]};this.$={nombre:'lpar',hijos:[v]};
break;
case 62:
this.$={nombre:'lpar',hijos:[]};
break;
case 63:
this.$ = {nombre:'asig',hijos:[$$[$0-2],$$[$0]]};
break;
case 65:
this.$={nombre:'cuerpo',hijos:[$$[$0]]};
break;
case 72:
this.$={nombre:'continue'};
break;
case 82:

	 this.$={nombre:'if',hijos:[$$[$0-6],$$[$0-2]]};
	 if($$[$0]!==null){
	 this.$.hijos.push($$[$0]);
	 }
	 
break;
case 85:

	   this.$={nombre:'switch',hijos:[$$[$0-7],$$[$0-5],$$[$0-2],$$[$0-1]]};
	   
break;
case 86:
this.$='true';
break;
case 87:
this.$='false';
break;
case 89:
this.$={nombre:'casos',hijos:[$$[$0]]};
break;
case 90:
this.$={nombre:'case',hijos:[$$[$0-2],$$[$0]]};
break;
case 92:
this.$={nombre:'default',hijos:[$$[$0]]};
break;
case 94:
this.$={nombre:'while',hijos:[$$[$0-4],$$[$0-1]]};
break;
case 95:
this.$={nombre:'dowhile',hijos:[$$[$0-5],$$[$0-1]]};
break;
case 96:
this.$={nombre:'repeat',hijos:[$$[$0-5],$$[$0-1]]};
break;
case 97:
this.$={nombre:'for',hijos:[$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]]};
break;
case 99:

	   var v= {nombre:'lid',hijos:[$$[$0-2]]};
	   this.$={nombre:'dec',tipo:'tnum',hijos:[v,$$[$0]]};
	   
break;
case 100:

	  var lidp ={nombre:'lidp',hijos:[$$[$0-3]]};
	  var b={nombre:'valor',tipo:'num', valor : '1'};
	  var suma={nombre:'+',hijos:[lidp,b]};
	  this.$ = {nombre:'asig',hijos:[lidp,suma]};
	  
break;
case 101:

	  var lidp ={nombre:'lidp',hijos:[$$[$0-3]]}	;
	  var b={nombre:'valor',tipo:'num', valor : '1'};
	  var resta={nombre:'-',hijos:[lidp,b]};
	  this.$ = {nombre:'asig',hijos:[lidp,resta]};
	  
break;
case 102:
this.$={nombre:'break',hijos:[$$[$0]]};
break;
case 103:
this.$={nombre:'break',hijos:[]};
break;
case 104:
this.$={nombre:'return',hijos:[$$[$0]]};
break;
case 105:
this.$={nombre:'return',hijos:[]};
break;
case 106:
this.$={nombre:'loop',valor:$$[$0-3],hijos:[$$[$0-1]]};
break;
case 107:
this.$={nombre:'count',hijos:[$$[$0-4],$$[$0-1]]};
break;
case 108:
this.$={nombre:'dowhilex',hijos:[$$[$0-7],$$[$0-3],$$[$0-1]]};
break;
case 109:

	    this.$={nombre:'llamado',valor:$$[$0-3],hijos:[$$[$0-1]]};
	    
break;
case 110:
$$[$0-2].hijos.push($$[$0-1]);this.$=$$[$0-2];
break;
case 111:
this.$={nombre:'lparfun',hijos:[$$[$0]]};
break;
case 112:
this.$={nombre:'lparfun',hijos:[]};
break;
case 113:
this.$={nombre:'principal',hijos:[$$[$0-1]]};
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,15:$V0,16:$V1,17:$V2,18:15,20:$V3,23:$V4,60:9,66:$V5,107:$V6},{1:[3]},{5:[1,18],6:19,7:4,8:5,9:6,10:7,11:8,15:$V0,16:$V1,17:$V2,18:15,20:$V3,23:$V4,60:9,66:$V5,107:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),o($V8,[2,56],{12:20,20:$V9}),{21:$Va,24:23,26:$Vb,61:22},{21:[1,25]},{56:[1,26]},o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,$Vd,{59:$Ve}),o($V8,[2,57]),o([14,20,21,26,59,68],$Vf),{1:[2,1]},o($V7,[2,2]),{13:28,14:[2,16],19:[1,29],21:[1,30]},o($Vg,[2,14]),{21:[1,31]},o([19,21,57],[2,58],{26:$Vh}),{27:33,28:$Vi,29:$Vj},{20:[1,35]},{57:[1,36]},{20:[1,37]},{14:[1,38]},{20:[1,39]},{18:49,20:$Vk,22:40,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{20:[1,55]},{27:56,28:$Vi,29:$Vj},{28:[1,57]},{28:[2,21],30:[1,58]},{24:59,26:$Vb},{63:[1,60]},o([14,19,20,21,26,31,32,33,34,35,38,39,40,41,42,43,45,46,47,48,49,50,57,59,68],[2,53]),o($Vt,[2,8]),o($Vg,[2,13]),{14:[2,15],31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},{18:49,20:$Vk,22:66,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},o($Vz,[2,29],{38:[1,67],39:[1,68],40:[1,69],41:[1,70],42:[1,71],43:[1,72]}),o($VA,[2,36],{45:[1,73],46:[1,74],47:$VB,48:$VC,49:$VD,50:$VE}),{18:49,20:$Vk,29:$Vl,44:79,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48],{59:$Ve}),o($VF,[2,49]),o($VF,[2,50]),{18:49,20:$Vk,22:80,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},o($VF,[2,52]),o([14,19,20,21,31,32,33,34,35,38,39,40,41,42,43,45,46,47,48,49,50,57,59,68],$Vf,{56:[1,81]}),{56:[1,82]},{28:[1,83]},o($VG,[2,19]),{29:[1,84]},{25:[1,85],26:$Vh},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:86,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{18:49,20:$Vk,22:116,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,22:117,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,22:118,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,22:119,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,22:120,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},o($Vz,[2,28]),{18:49,20:$Vk,29:$Vl,37:121,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,37:122,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,37:123,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,37:124,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,37:125,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,37:126,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,44:127,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,44:128,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,44:129,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,44:130,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,44:131,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,29:$Vl,44:132,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},o($VS,[2,43],{47:$VB,48:$VC,49:$VD,50:$VE}),{31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,57:[1,133]},o($VT,[2,112],{37:42,44:43,51:45,18:49,54:50,106:134,22:135,20:$Vk,29:$Vl,36:$Vm,46:$Vn,52:$Vo,53:$Vp,55:$Vq,56:$Vr,58:$Vs}),o($VT,[2,62],{18:15,62:136,11:137,15:$V0,16:$V1,17:$V2,20:$V3}),o($VG,[2,18]),{28:[2,20]},{11:138,15:$V0,16:$V1,17:$V2,18:15,20:$V3},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,139],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),{14:[1,141]},o($VU,[2,69]),o($VU,[2,70]),{14:[1,142]},{14:[1,143]},{14:[1,144]},o($VU,[2,74]),o($VU,[2,75]),o($VU,[2,76]),o($VU,[2,77]),o($VU,[2,78]),o($VU,[2,79]),o($VU,[2,80]),{14:[1,145]},{12:20,20:$V9},{20:$Vd,59:$Ve,68:$VV},{56:[1,147]},{56:[1,148]},{14:[2,103],20:[1,149]},{14:[2,105],18:49,20:$Vk,22:150,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{56:[1,151]},{63:[1,152]},{56:[1,153]},{20:[1,154]},{56:[1,155]},{63:[1,156]},o($VW,[2,23],{32:$Vv,33:$Vw,34:$Vx}),o($VX,[2,24],{33:$Vw}),o($Vz,[2,25]),o($VX,[2,26],{33:$Vw}),o($VW,[2,27],{32:$Vv,33:$Vw,34:$Vx}),o($VA,[2,30]),o($VA,[2,31]),o($VA,[2,32]),o($VA,[2,33]),o($VA,[2,34]),o($VA,[2,35]),o($VS,[2,37],{47:$VB,48:$VC,49:$VD,50:$VE}),o($VS,[2,38],{47:$VB,48:$VC,49:$VD,50:$VE}),o($VY,[2,39],{50:$VE}),o($VY,[2,40],{50:$VE}),o($VY,[2,41],{50:$VE}),o($VY,[2,42],{50:$VE}),o($VF,[2,51]),{19:[1,158],57:[1,157]},o($VT,[2,111],{31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),{19:[1,160],57:[1,159]},{20:[1,161]},{14:[1,162]},o($V7,[2,113]),o($VU,[2,64]),o($VU,[2,68]),o($VU,[2,71]),o($VU,[2,72]),o($VU,[2,73]),o($VU,[2,81]),{18:49,20:$Vk,22:163,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,22:164,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,22:165,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{14:[2,102]},{14:[2,104],31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},{18:49,20:$Vk,22:166,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:167,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{16:[1,170],18:171,20:$V3,67:169,99:168},{63:[1,172]},{18:49,20:$Vk,22:173,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:174,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},o($VF,[2,109]),{18:49,20:$Vk,22:175,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{63:[1,176]},{11:177,15:$V0,16:$V1,17:$V2,18:15,20:$V3},o($VT,$Va,{24:23,61:178,26:$Vb}),o($Vt,[2,17]),{14:[2,63],31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},{31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,57:[1,179]},{19:[1,180],31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},{31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,57:[1,181]},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,182],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{14:[1,183]},{14:[2,98]},{20:[1,184]},{59:$Ve,68:$VV},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:185,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,57:[1,186]},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,187],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},o($VT,[2,110],{31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:188,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{20:[1,189]},o($VT,[2,61]),{83:[1,190]},{52:[1,192],53:[1,193],87:191},{63:[1,194]},{94:[1,195],105:[1,196]},{18:49,20:$Vk,22:197,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{68:[1,198]},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,199],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{63:[1,200]},{97:[1,201]},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,202],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},o($VT,$Va,{24:23,61:203,26:$Vb}),{63:[1,204]},{57:[1,205]},{57:[2,86]},{57:[2,87]},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:206,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{56:[1,207]},{56:[1,208]},{14:[1,209],31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},{18:49,20:$Vk,22:210,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},o($VU,[2,106]),{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:211,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{56:[1,212]},o($V7,[2,55]),o($VT,[2,60]),{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:213,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{63:[1,214]},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,215],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{18:49,20:$Vk,22:216,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{18:49,20:$Vk,22:217,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{20:[1,219],100:218},{14:[2,99],31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,220],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{18:49,20:$Vk,22:221,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,222],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{88:223,90:224,91:$VZ},o($VU,[2,94]),{31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,57:[1,226]},{19:[1,227],31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},{63:[1,228]},{45:[1,229],46:[1,230]},o($VU,[2,107]),{31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,57:[1,231]},o($VU,[2,84],{84:232,85:[1,233]}),{65:[2,93],89:234,90:235,91:$VZ,93:[1,236]},o($V_,[2,89]),{18:49,20:$Vk,22:238,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs,92:237},o($VU,[2,95]),{18:49,20:$Vk,22:239,29:$Vl,36:$Vm,37:42,44:43,46:$Vn,51:45,52:$Vo,53:$Vp,54:50,55:$Vq,56:$Vr,58:$Vs},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:240,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{45:[1,241]},{46:[1,242]},o($VU,[2,96]),o($VU,[2,82]),{63:[1,243]},{65:[1,244]},o($V_,[2,88]),{21:[1,245]},{21:[1,246]},{21:[2,91],31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},{31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,57:[1,247]},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,248],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{57:[1,249]},{57:[1,250]},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:251,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},o($VU,[2,85]),{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:252,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,64:253,67:90,69:87,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},o($VU,[2,108]),o($VU,[2,97]),{63:[2,100]},{63:[2,101]},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[1,254],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},{7:88,9:89,11:104,15:$V0,16:$V1,17:$V2,18:105,20:$Vk,23:$V4,54:103,65:[2,92],67:90,69:140,70:91,71:92,72:93,73:$VH,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR},o($V_,[2,90],{7:88,9:89,67:90,70:91,71:92,72:93,74:95,75:96,76:97,77:98,78:99,79:100,80:101,81:102,54:103,11:104,18:105,69:140,15:$V0,16:$V1,17:$V2,20:$Vk,23:$V4,73:$VH,82:$VI,86:$VJ,94:$VK,95:$VL,96:$VM,98:$VN,101:$VO,102:$VP,103:$VQ,104:$VR}),o($VU,[2,83])],
defaultActions: {18:[2,1],84:[2,20],149:[2,102],169:[2,98],192:[2,86],193:[2,87],249:[2,100],250:[2,101]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* espacios en blanco se ignoran */
break;
case 1:/* espacios en blanco se ignoran */
break;
case 2:/* espacios en blanco se ignoran */
break;
case 3:/*comentario de linea*/
break;
case 4:/*comentario de parrafo*/
break;
case 5:return 29
break;
case 6:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 55;
break;
case 7:return 47
break;
case 8:return 48
break;
case 9:return 46
break;
case 10:return 45
break;
case 11:return 50
break;
case 12:return 49
break;
case 13:return 56
break;
case 14:return 57
break;
case 15:return 63
break;
case 16:return 65
break;
case 17:return 26
break;
case 18:return 28
break;
case 19:return 21
break;
case 20:return 14
break;
case 21:return 19
break;
case 22:return 30
break;
case 23:return 59
break;
case 24:return 38
break;
case 25:return 68
break;
case 26:return 39
break;
case 27:return 42
break;
case 28:return 43
break;
case 29:return 40
break;
case 30:return 41
break;
case 31:return 31
break;
case 32:return 35
break;
case 33:return 32
break;
case 34:return 34
break;
case 35:return 31
break;
case 36:return 33
break;
case 37:return 36
break;
case 38:return 15
break;
case 39:return 17
break;
case 40:return 16
break;
case 41:return 66
break;
case 42:return 82
break;
case 43:return 16
break;
case 44:return 23
break;
case 45:return 25
break;
case 46:return 82
break;
case 47:return 83
break;
case 48:return 85
break;
case 49:return 86
break;
case 50:return 91
break;
case 51:return 93
break;
case 52:return 101
break;
case 53:return 73
break;
case 54:return 102
break;
case 55:return 94
break;
case 56:return 95
break;
case 57:return 96
break;
case 58:return 97
break;
case 59:return 98
break;
case 60:return 103
break;
case 61:return 104
break;
case 62:return 105
break;
case 63:return 107
break;
case 64:return 'getBool'
break;
case 65:return 'getNum'
break;
case 66:return 'outStr'
break;
case 67:return 'outNum'
break;
case 68:return 'inStr'
break;
case 69:return 'inNum'
break;
case 70:return 'show'
break;
case 71:return 'getRandom'
break;
case 72:return 'getLength'
break;
case 73:return 'throws'
break;
case 74:return 58
break;
case 75:return 'NullPoinerException'
break;
case 76:return 'MissingReturnStatement'
break;
case 77:return 'ArithmeticException'
break;
case 78:return 'StackOverFlowException'
break;
case 79:return 'HeapOverFlowException'
break;
case 80:return 'PoolOverFlowException'
break;
case 81:return 52
break;
case 82:return 53
break;
case 83:return 20
break;
case 84:return 5
break;
case 85:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\r)/,/^(?:\n)/,/^(?:%%[^\n]*\n)/,/^(?:¿¿[^"??"]*\?\?)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:\|\?)/,/^(?:&&)/,/^(?:&\?)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:!)/,/^(?:bool\b)/,/^(?:str\b)/,/^(?:num\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:num\b)/,/^(?:array\b)/,/^(?:of\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:Principal\b)/,/^(?:getBool\b)/,/^(?:getNum\b)/,/^(?:outStr\b)/,/^(?:outNum\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:throws\b)/,/^(?:NULL\b)/,/^(?:NullPoinerException\b)/,/^(?:MissingReturnStatement\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Avanzado;
exports.Parser = Avanzado.Parser;
exports.parse = function () { return Avanzado.parse.apply(Avanzado, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}